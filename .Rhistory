labs(
x = "Frequency (Hz)",
y = "Mean Absorbance",
title = "Mean absorbance from each publication in WAI database",
color = ""
) +
theme(
legend.position = c(0.17, 0.78),
legend.text = element_text(size = 5),
legend.key.size = unit(0.3, "cm"),
legend.spacing.x = unit(0.2, "cm"),
legend.spacing.y = unit(0.1, "cm"),
legend.background = element_rect(fill = "white", size = 0.5)
)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Mean Absorbance by Identifier"),
sidebarLayout(
sidebarPanel(
checkboxGroupInput(
"selected_identifiers",
"Select Identifiers:",
choices = unique(absorbance3$Identifier),
selected = unique(absorbance3$Identifier) # Default: All selected
)
),
mainPanel(
plotOutput("absorbance_plot"),
br(),  # Adds a line break for spacing
div(
style = "margin-top: 20px;",
"To access the data used here, visit this website: http://www.science.smith.edu/wai-database/. This graph was meant to mimic the work of Susan E Voss, her much better looking graph can be seen at this website: https://pmc.ncbi.nlm.nih.gov/articles/PMC7093226/"
)
)
)
)
server <- function(input, output, session) {
filtered_data <- reactive({
absorbance3 %>%
filter(Identifier %in% input$selected_identifiers)
})
output$absorbance_plot <- renderPlot({
ggplot(filtered_data(), aes(x = frequency, y = mean_absorbance, group = Identifier, color = colorID)) +
geom_line() +
ylim(0, 1) +
xlim(0, 8000) +
scale_x_log10() +
labs(
x = "Frequency (Hz)",
y = "Mean Absorbance",
title = "Mean absorbance from each publication in WAI database",
color = ""
) +
theme(
legend.position = c(0.17, 0.78),
legend.text = element_text(size = 5),
legend.key.size = unit(0.3, "cm"),
legend.spacing.x = unit(0.2, "cm"),
legend.spacing.y = unit(0.1, "cm"),
legend.background = element_rect(fill = "white", size = 0.5)
)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Mean Absorbance by Identifier"),
sidebarLayout(
sidebarPanel(
checkboxGroupInput(
"selected_identifiers",
"Select Studies:",
choices = unique(absorbance3$Identifier),
selected = unique(absorbance3$Identifier)
)
),
mainPanel(
plotOutput("absorbance_plot"),
br(),  # Adds a line break for spacing
div(
style = "margin-top: 20px;",
"To access the data used here, visit this website: http://www.science.smith.edu/wai-database/. This graph was meant to mimic the work of Susan E Voss, her much better looking graph can be seen at this website: https://pmc.ncbi.nlm.nih.gov/articles/PMC7093226/"
)
)
)
)
server <- function(input, output, session) {
filtered_data <- reactive({
absorbance3 %>%
filter(Identifier %in% input$selected_identifiers)
})
output$absorbance_plot <- renderPlot({
ggplot(filtered_data(), aes(x = frequency, y = mean_absorbance, group = Identifier, color = colorID)) +
geom_line() +
ylim(0, 1) +
xlim(0, 8000) +
scale_x_log10() +
labs(
x = "Frequency (Hz)",
y = "Mean Absorbance",
title = "Mean absorbance from each publication in WAI database",
color = ""
) +
theme(
legend.position = c(0.17, 0.78),
legend.text = element_text(size = 5),
legend.key.size = unit(0.3, "cm"),
legend.spacing.x = unit(0.2, "cm"),
legend.spacing.y = unit(0.1, "cm"),
legend.background = element_rect(fill = "white", size = 0.5)
)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Mean Absorbance by Identifier"),
sidebarLayout(
sidebarPanel(
checkboxGroupInput(
"selected_identifiers",
"Select Studies:",
choices = unique(absorbance3$AuthorShortList),
selected = unique(absorbance3$AuthorsShortList)
)
),
mainPanel(
plotOutput("absorbance_plot"),
br(),  # Adds a line break for spacing
div(
style = "margin-top: 20px;",
"To access the data used here, visit this website: http://www.science.smith.edu/wai-database/. This graph was meant to mimic the work of Susan E Voss, her much better looking graph can be seen at this website: https://pmc.ncbi.nlm.nih.gov/articles/PMC7093226/"
)
)
)
)
server <- function(input, output, session) {
filtered_data <- reactive({
absorbance3 %>%
filter(Identifier %in% input$selected_identifiers)
})
output$absorbance_plot <- renderPlot({
ggplot(filtered_data(), aes(x = frequency, y = mean_absorbance, group = Identifier, color = colorID)) +
geom_line() +
ylim(0, 1) +
xlim(0, 8000) +
scale_x_log10() +
labs(
x = "Frequency (Hz)",
y = "Mean Absorbance",
title = "Mean absorbance from each publication in WAI database",
color = ""
) +
theme(
legend.position = c(0.17, 0.78),
legend.text = element_text(size = 5),
legend.key.size = unit(0.3, "cm"),
legend.spacing.x = unit(0.2, "cm"),
legend.spacing.y = unit(0.1, "cm"),
legend.background = element_rect(fill = "white", size = 0.5)
)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Mean Absorbance by Identifier"),
sidebarLayout(
sidebarPanel(
checkboxGroupInput(
"selected_identifiers",
"Select Studies:",
choices = unique(absorbance3$Identifier),
selected = unique(absorbance3$Identifier)
)
),
mainPanel(
plotOutput("absorbance_plot"),
br(),  # Adds a line break for spacing
div(
style = "margin-top: 20px;",
"To access the data used here, visit this website: http://www.science.smith.edu/wai-database/. This graph was meant to mimic the work of Susan E Voss, her much better looking graph can be seen at this website: https://pmc.ncbi.nlm.nih.gov/articles/PMC7093226/"
)
)
)
)
server <- function(input, output, session) {
filtered_data <- reactive({
absorbance3 %>%
filter(Identifier %in% input$selected_identifiers)
})
output$absorbance_plot <- renderPlot({
ggplot(filtered_data(), aes(x = frequency, y = mean_absorbance, group = Identifier, color = colorID)) +
geom_line() +
ylim(0, 1) +
xlim(0, 8000) +
scale_x_log10() +
labs(
x = "Frequency (Hz)",
y = "Mean Absorbance",
title = "Mean absorbance from each publication in WAI database",
color = ""
) +
theme(
legend.position = c(0.17, 0.78),
legend.text = element_text(size = 5),
legend.key.size = unit(0.3, "cm"),
legend.spacing.x = unit(0.2, "cm"),
legend.spacing.y = unit(0.1, "cm"),
legend.background = element_rect(fill = "white", size = 0.5)
)
})
}
shinyApp(ui, server)
library(tidyverse)
library(RMariaDB)
library(shiny)
con_waiShiny <- dbConnect(
MariaDB(), host = "scidb.smith.edu",
user = "waiuser", password = "smith_waiDB",
dbname = "wai"
)
Measurements <- tbl(con_waiShiny, "Measurements")
PI_Info <- tbl(con_waiShiny, "PI_Info")
Subjects <- tbl(con_waiShiny, "Subjects")
# collect(Measurements)
absorbanceShiny <- DBI::dbGetQuery(con_waiShiny,"SELECT
info.Identifier,
CASE
WHEN m.Instrument = 'other' THEN 'not commercial system'
ELSE m.Instrument
END AS Instrument,
info.AuthorsShortList,
info.year,
COUNT(DISTINCT m.SubjectNumber, m.Ear) AS Unique_Ears,
AVG(m.Absorbance) AS mean_absorbance,
m.frequency,
CONCAT(AuthorsShortList, ' (', year, ') N=', COUNT(DISTINCT m.SubjectNumber, m.Ear), '; ', Instrument) AS colorID
FROM (
SELECT
Identifier, SubjectNumber, Ear, frequency, Instrument, AVG(Absorbance) AS Absorbance
FROM Measurements
GROUP BY Identifier, SubjectNumber, Ear, frequency, Instrument
) AS m
JOIN PI_Info as info ON info.Identifier = m.Identifier
JOIN PI_Info_OLD as info_old ON info.Identifier = info_old.Identifier
WHERE
m.frequency < 8000 AND m.frequency > 200
GROUP BY info.Identifier, m.Instrument, info.AuthorsShortList, info.year, m.frequency
ORDER BY info.AuthorsShortList, m.frequency ASC")
dbDisconnect(con_waiShiny, shutdown = TRUE)
ui <- fluidPage(
titlePanel("Mean Absorbance by Identifier"),
sidebarLayout(
sidebarPanel(
checkboxGroupInput(
"selected_identifiers",
"Select Studies:",
choices = unique(absorbance3$Identifier),
selected = unique(absorbance3$Identifier)
)
),
mainPanel(
plotOutput("absorbance_plot"),
br(),  # Adds a line break for spacing
div(
style = "margin-top: 20px;",
"To access the data used here, visit this website: http://www.science.smith.edu/wai-database/. This graph was meant to mimic the work of Susan E Voss, her much better looking graph can be seen at this website: https://pmc.ncbi.nlm.nih.gov/articles/PMC7093226/"
)
)
)
)
server <- function(input, output, session) {
filtered_data <- reactive({
absorbance3 %>%
filter(Identifier %in% input$selected_identifiers)
})
output$absorbance_plot <- renderPlot({
ggplot(filtered_data(), aes(x = frequency, y = mean_absorbance, group = Identifier, color = colorID)) +
geom_line() +
ylim(0, 1) +
xlim(0, 8000) +
scale_x_log10() +
labs(
x = "Frequency (Hz)",
y = "Mean Absorbance",
title = "Mean absorbance from each publication in WAI database",
color = ""
) +
theme(
legend.position = c(0.17, 0.78),
legend.text = element_text(size = 5),
legend.key.size = unit(0.3, "cm"),
legend.spacing.x = unit(0.2, "cm"),
legend.spacing.y = unit(0.1, "cm"),
legend.background = element_rect(fill = "white", size = 0.5)
)
})
}
shinyApp(ui, server)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='m1keh0uk', token='EFF51AB9ED0E2462B1A2DCE5FAEDC3F6', secret='AC5D1BFihXKB7txhQF3CH+bGGg/xUNW9NbjFVhFe')
runApp('WAIshiny')
rsconnect::deployApp("/Users/michaelhouk/Documents/git/m1keh0uk.github.io/WAIshiny")
rsconnect::forgetDeployment("/Users/michaelhouk/Documents/git/m1keh0uk.github.io/WAIshiny")
rsconnect::deployApp("/Users/michaelhouk/Documents/git/m1keh0uk.github.io/WAIshiny")
shinyApp(ui, server)
write.csv(absorbanceShiny, "absorbanceShiny.csv", row.names = FALSE)
runApp('WAIshiny')
runApp('WAIshiny')
shinyApp(ui, server)
rsconnect::deployApp("/Users/michaelhouk/Documents/git/m1keh0uk.github.io/WAIshiny")
rsconnect::forgetDeployment("/Users/michaelhouk/Documents/git/m1keh0uk.github.io/WAIshiny")
rsconnect::deployApp("/Users/michaelhouk/Documents/git/m1keh0uk.github.io/WAIshiny")
runApp('WAIshiny')
rsconnect::forgetDeployment("/Users/michaelhouk/Documents/git/m1keh0uk.github.io/WAIshiny")
rsconnect::deployApp("/Users/michaelhouk/Documents/git/m1keh0uk.github.io/WAIshiny")
drunk_k <- bind_rows(drunk_passengers_k5, drunk_passengers_k20)
library(tidyverse)
library(purrr)
drunk_k <- bind_rows(drunk_passengers_k5, drunk_passengers_k20)
library(tidyverse)
library(purrr)
drunkPassenger <- function(n, seats){
#generate random seat for first (drunk) passenger
if (n == 1) {
seats <-seats[seats != sample(seats, 1, replace = FALSE)]
}
#check if last seat matches last person, return true/false
if (length(seats) == 1){
return(seats[1] == n)
}
#pick assigned seat if available, else pick random
choice = ifelse(n %in% seats, n, sample(seats, 1, replace = FALSE))
remaining_seats <- seats[seats != choice]
#call function again for next passenger
drunkPassenger(n + 1, remaining_seats)
}
seats <- 2:100
runs <- 1000
drunk_passengers_100 <- map(seats, function(x) {
data.frame(
num_passengers = x,
pct_correct_last_seat = mean(map_lgl(1:runs, ~ drunkPassenger(1, 1:x)))
)
}) |>
list_rbind() |>
mutate(runs = runs, num_seats = num_passengers) |>
select(num_passengers, num_seats, pct_correct_last_seat, runs)
drunk_passengers_100 |>
ggplot(aes(x = num_passengers, y = pct_correct_last_seat)) +
geom_line() +
ylim(0,1)+
labs(
title = "% of Planes Where Last Person Gets Their Seat",
x = "Number of Passengers",
y = ""
)
drunkPassenger_k <- function(n, passengers, seats){
#check if last guy gets his seat
if (length(passengers) == n){
return(n %in% seats)
}
#fist seat selection
if (n == 1) {
first_choice = sample(seats, 1, replace = FALSE)
#stop simulation if chooses last persons seat
if (first_choice == length(passengers)) {
return(FALSE)
}
remaining_seats <-seats[seats != first_choice]
} else{
#pick assigned seat if available, else pick random
choice = ifelse(n %in% seats, n, sample(seats, 1, replace = FALSE))
if (choice == length(passengers)) {
return(FALSE)
}
remaining_seats <-seats[seats != choice]
}
#call function again for next passenger
drunkPassenger_k(n + 1, passengers, remaining_seats)
}
runs = 1000
passengers = 20
seats = 20:30
drunk_passengers_k20 <- map(seats, function(x) {
data.frame(
num_seats = x,
pct_correct_last_seat = mean(map_lgl(1:runs, ~ drunkPassenger_k(1, 1:passengers, 1:x)))
)
}) |>
list_rbind() |>
mutate(runs = runs, num_passengers = passengers) |>
select(num_passengers, num_seats, pct_correct_last_seat, runs)
runs = 1000
passengers = 5
seats = 5:15
drunk_passengers_k5 <- map(seats, function(x) {
data.frame(
num_seats = x,
pct_correct_last_seat = mean(map_lgl(1:runs, ~ drunkPassenger_k(1, 1:passengers, 1:x)))
)
}) |>
list_rbind() |>
mutate(runs = runs, num_passengers = passengers) |>
select(num_passengers, num_seats, pct_correct_last_seat, runs)
drunk_k <- bind_rows(drunk_passengers_k5, drunk_passengers_k20)
drunk_k |>
group_by(num_passengers) |>
mutate(diff = num_seats - num_passengers) |>
ggplot(aes(x = diff, y = pct_correct_last_seat, color = factor(num_passengers), group = num_passengers)) +
geom_line() +
labs(
color = "Number of Passengers",
x = "Extra Seats",
title = "% of Planes Where Last Person Gets Their Seat",
y = "")
library(tidyverse)
library(purrr)
drunkPassenger <- function(n, seats){
#generate random seat for first (drunk) passenger
if (n == 1) {
seats <-seats[seats != sample(seats, 1, replace = FALSE)]
}
#check if last seat matches last person, return true/false
if (length(seats) == 1){
return(seats[1] == n)
}
#pick assigned seat if available, else pick random
choice = ifelse(n %in% seats, n, sample(seats, 1, replace = FALSE))
remaining_seats <- seats[seats != choice]
#call function again for next passenger
drunkPassenger(n + 1, remaining_seats)
}
seats <- 2:100
runs <- 100
drunk_passengers_100 <- map(seats, function(x) {
data.frame(
num_passengers = x,
pct_correct_last_seat = mean(map_lgl(1:runs, ~ drunkPassenger(1, 1:x)))
)
}) |>
list_rbind() |>
mutate(runs = runs, num_seats = num_passengers) |>
select(num_passengers, num_seats, pct_correct_last_seat, runs)
drunk_passengers_100 |>
ggplot(aes(x = num_passengers, y = pct_correct_last_seat)) +
geom_line() +
ylim(0,1)+
labs(
title = "% of Planes Where Last Person Gets Their Seat",
x = "Number of Passengers",
y = ""
)
drunkPassenger_k <- function(n, passengers, seats){
#check if last guy gets his seat
if (length(passengers) == n){
return(n %in% seats)
}
#fist seat selection
if (n == 1) {
first_choice = sample(seats, 1, replace = FALSE)
#stop simulation if chooses last persons seat
if (first_choice == length(passengers)) {
return(FALSE)
}
remaining_seats <-seats[seats != first_choice]
} else{
#pick assigned seat if available, else pick random
choice = ifelse(n %in% seats, n, sample(seats, 1, replace = FALSE))
if (choice == length(passengers)) {
return(FALSE)
}
remaining_seats <-seats[seats != choice]
}
#call function again for next passenger
drunkPassenger_k(n + 1, passengers, remaining_seats)
}
runs = 1000
passengers = 20
seats = 20:30
drunk_passengers_k20 <- map(seats, function(x) {
data.frame(
num_seats = x,
pct_correct_last_seat = mean(map_lgl(1:runs, ~ drunkPassenger_k(1, 1:passengers, 1:x)))
)
}) |>
list_rbind() |>
mutate(runs = runs, num_passengers = passengers) |>
select(num_passengers, num_seats, pct_correct_last_seat, runs)
runs = 1000
passengers = 5
seats = 5:15
drunk_passengers_k5 <- map(seats, function(x) {
data.frame(
num_seats = x,
pct_correct_last_seat = mean(map_lgl(1:runs, ~ drunkPassenger_k(1, 1:passengers, 1:x)))
)
}) |>
list_rbind() |>
mutate(runs = runs, num_passengers = passengers) |>
select(num_passengers, num_seats, pct_correct_last_seat, runs)
drunk_k <- bind_rows(drunk_passengers_k5, drunk_passengers_k20)
drunk_k |>
group_by(num_passengers) |>
mutate(diff = num_seats - num_passengers) |>
ggplot(aes(x = diff, y = pct_correct_last_seat, color = factor(num_passengers), group = num_passengers)) +
geom_line() +
labs(
color = "Number of Passengers",
x = "Extra Seats",
title = "% of Planes Where Last Person Gets Their Seat",
y = "")
